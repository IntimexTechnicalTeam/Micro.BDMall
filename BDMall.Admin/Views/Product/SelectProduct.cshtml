@{
    ViewBag.Title = BDMall.Resources.Label.SelectProduct;
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}



<div id="app" class="col-md-12" v-cloak>
    <div>
        <table class="table table-condensed">
            <tr>
                <td class="col-xs-1">
                    @BDMall.Resources.Label.ProductCode
                </td>
                <td class="col-xs-5">
                    <input type="text" v-model="condition.ProductCode" class="form-control input-sm" />
                </td>
                <td class="col-xs-1">
                    @BDMall.Resources.Label.KeyWord
                </td>
                <td class="col-xs-5">
                    <div class="row">
                        <div class="col-xs-8">
                            <input type="text" v-model="condition.Key" class="form-control input-sm" />
                        </div>
                        <div class="col-xs-4">
                            <select id="cboKeyWordType" class="form-control input-sm"></select>
                        </div>
                    </div>
                </td>

            </tr>
        </table>
        <div id="collapseOne" class="panel-collapse collapse">
            <table class="table table-condensed">
                <tr>
                    <td class="col-xs-1">
                        @BDMall.Resources.Label.Category
                    </td>
                    <td colspan="3" class="col-xs-11">
                        <combobox-item v-bind:getcombobox="GetCurrentCategory"></combobox-item>
                    </td>

                </tr>
                @*<tr>
                        <td class="col-xs-1">
                            @BDMall.Resources.Label.AllAttribute
                        </td>
                        <td class="col-xs-5">
                            <form class="form-inline">
                                <select id="cboAttribute" class="form-control" style="width:300px;" onchange="ShowAttributeValue(this)"></select>
                                <select id="cboAttributeValue" class="form-control" style="width:300px;" v-show="IsShowAttributeValue"></select>
                            </form>
                        </td>
                        <td class="col-xs-1">
                            @BDMall.Resources.Label.PermissionLevel
                        </td>
                        <td class="col-xs-5">

                            <select id="cboPermission" class="form-control" style="width:300px;"></select>

                        </td>
                    </tr>*@
                <tr>
                    <td class="col-xs-1">
                        <span v-show="condition.ProductSearchType>0">@BDMall.Resources.Label.ProductType</span>
                    </td>
                    <td class="col-xs-5">
                        <select id="cboSorted" class="form-control" style="width:300px;" v-show="condition.ProductSearchType>0">
                            <option value="">@BDMall.Resources.Label.PleaseSelect</option>
                            <option value="HotSale">@BDMall.Resources.Value.HotSaleProduct</option>
                            <option value="HighRating">@BDMall.Resources.Value.HightRatingProduct</option>
                            <option value="NewProduct">@BDMall.Resources.Value.NewProduct</option>
                            <option value="WishList">@BDMall.Resources.Value.WishList</option>
                        </select>
                    </td>
                    <td>
                        <span v-if="IsMerchant==false">@BDMall.Resources.Label.MerchantName</span>
                    </td>
                    <td>
                        <select v-if="IsMerchant==false" id="cboMerchant" class="form-control" style="width:300px;" v-bind:disabled="condition.MerchantId!='00000000-0000-0000-0000-000000000000' && IsMerchant==true"></select>
                    </td>
                </tr>
            </table>

        </div>
        <div class="text-right">
            <input type="button" class="btn btn-default" value="@BDMall.Resources.Action.Search" onclick="search();" />
            <input type="button" class="btn btn-default" value="@BDMall.Resources.Action.ExtraCondition" data-toggle="collapse" data-target="#collapseOne" />
        </div>
    </div>


    <div>
        <div class="panel-body">
            <div id="toolbar" class="btn-group">
                <button id="btn_add" type="button" class="btn btn-default" v-on:click="add" v-bind:disabled="IsAdd">
                    <span class="glyphicon glyphicon-plus" aria-hidden="true"></span>@BDMall.Resources.Action.Add
                </button>
            </div>
            <table id="tblProduct"></table>
        </div>
    </div>

    <div id="outerdiv" style="position:fixed;top:0;left:0;background:rgba(0,0,0,0.7);z-index:1200;width:100%;height:100%;display:none;">
        <div id="innerdiv" style="position:absolute;">
            <img id="bigimg" style="border:5px solid #fff;" src="" />
        </div>
    </div>
</div>

@section scripts{
    <script src="~/Scripts/admin/vue-component/productCatalog.js"></script>
    <script type="text/javascript">
        var isSingleSelect = Boolean(@ViewBag.IsSingleSelect);
        var isMerchant = Boolean(@ViewBag.IsMerchant);
        var merchantId = '@ViewBag.MerchantId';
        var productSearchType = '@ViewBag.SearchProductType';
        var timer = null;
        var vm = new Vue({
            el: "#app",
            data: {
                IsMerchant: isMerchant,
                ViewType: 0,
                ProductList: [],
                Selected: [],
                condition: {
                    Language:0,
                    Key: "",
                    KeyWordType: "",
                    ProductCode: "",
                    Category: WS.GuidEmpty,
                    Attribute: WS.GuidEmpty,
                    AttributeValue: WS.GuidEmpty,
                    PermissionLevel: 0,
                    OnSale: false,
                    SaleOff: false,
                    CreateDateFrom: "",
                    CreateDateTo: "",
                    IsActive: 1,
                    IsApprove: 1,
                    MerchantId: merchantId,
                    ProductSearchType: productSearchType
                },
                IsShowAttributeValue: false,
                IsAdd: true,
                ProductCondtionCache: {
                    KeyWordTypes: [],
                    Attributes: [],
                    AttributeValues: [],
                    Permissions: [],
                    SortedKeys: [],
                    SortedKeyTypes: []
                },
            },
            methods: {
                ShowTableData: function () {
                    $("#tblProduct").bootstrapTable("refresh", { url: "/AdminAPI/Product/SearchProductList", pageNumber:1 });
                    vm.IsAdd = true;
                },
                GetCurrentCategory: function (data) {
                    var obj = new Object();
                    vm.condition.Category = data.currentValue;
                    obj.catId = data.currentValue;

                },
                SetButtonState: function () {

                    var selected = $("#tblProduct").bootstrapTable("getSelections");

                    if (selected.length > 0) {
                        vm.IsAdd = false;
                    }
                    else {
                        vm.IsAdd = true;
                    }
                },
                add: function () {
                    dialogClose();
                },
                getBigImage: function (_this) {
                    var src = _this.attr("src");
                    WS.Get("/adminapi/ProdImage/GetBigImgPath", { src: src },
                        function (response) {
                            imgShowBySrc("#outerdiv", "#innerdiv", "#bigimg", response);
                        },
                        function () { });
                },
                openBigImage: function (_this) {
                    var src = _this.attr("src");
                    WS.Get("/adminapi/ProdImage/GetBigImgPath", { src: src },
                        function (response) {
                            window.open(response);
                        },
                        function () { });
                },
                addProduct: function (row) {
                    if (isSingleSelect)
                    {
                        vm.ProductList = [];
                    }
                    if ($.inArray(row, vm.ProductList) < 0) {
                        vm.ProductList.push(row);
                    }
                    console.log(vm.ProductList);
                },
                removeProduct: function (row) {
                    var index = $.inArray(row, vm.ProductList);
                    vm.ProductList.splice(index, 1);
                    console.log(vm.ProductList);
                }
            }
        });

        function dialogClose() {
            //var selected = $("#tblProduct").bootstrapTable("getSelections");

            bDialog.closeCurrent(vm.ProductList);


        }

       var ProductTableInit = function () {

            var btTable = new Object();

            btTable.queryParams = function (params) {
                var page = 1;
                if (params.offset > 0) {
                    page = parseInt(params.offset / params.limit) + 1;
                }

                var sorted = params.order;

                vm.condition.KeyWordType = $("#cboKeyWordType").val();
                //vm.condition.Attribute = $("#cboAttribute").val();
                //vm.condition.AttributeValue = $("#cboAttributeValue").val();
                //vm.condition.PermissionLevel = $("#cboPermission").val();
                vm.condition.MerchantId = $("#cboMerchant").val() == -1 ? WS.GuidEmpty : $("#cboMerchant").val();
                vm.condition.ProductSearchType = productSearchType;
                //vm.CurrentPage = page;
                //vm.CurrentSize = params.limit;
                var sortedBy = $("#cboSorted").val();


                vm.condition.PageInfo = { Page: page, PageSize: params.limit, SortName: sortedBy, SortOrder: sorted };

                return vm.condition;

            }
            btTable.Init = function () {

                $("#tblProduct").bootstrapTable({
                    method: 'post',                      //请求方式（*）
                    url: '/AdminAPI/Product/SearchProductList',         //请求后台的URL（*）
                    queryParams: btTable.queryParams,//传递参数（*）
                    //queryParamsType:'limit',
                    toolbar: '#toolbar',                //工具按钮用哪个容器
                    striped: true,                      //是否显示行间隔色
                    cache: true,                       //是否使用缓存，默认为true，所以一般情况下需要设置一下这个属性（*）
                    sortable: false,                     //是否启用排序
                    sortOrder: "asc",                   //排序方式
                    sidePagination: "server",           //分页方式：client客户端分页，server服务端分页（*）
                    pageNumber: 1,                       //初始化加载第一页，默认第一页
                    pageSize: 10,                       //每页的记录行数（*）
                    pageList: [10, 25, 50, 100],        //可供选择的每页的行数（*）
                    smartDisplay: false,
                    showRefresh: true,                  //是否显示刷新按钮
                    singleSelect: isSingleSelect,
                    clickToSelect: true,                //是否启用点击选中行
                    //height: 750,                        //行高，如果没有设置height属性，表格自动根据记录条数觉得表格高度
                    uniqueId: "ProductId",                     //每一行的唯一标识，一般为主键列
                    cardView: false,                    //是否显示详细视图
                    detailView: false,                   //是否显示父子表
                    pagination: true,                   //是否显示分页（*）
                    dataField: "Data",
                    totalField: "TotalRecord",
                    ajaxOptions: {
                        beforeSend: function (request) {
                            var access_token = $.cookie("access_token");
                            request.setRequestHeader("Authorization", "Bearer " + access_token);
                        }
                    },
                    onLoadSuccess: function () {
                        vm.SetButtonState();
                    },
                    onCheck: function (row) {
                        vm.SetButtonState();
                        vm.addProduct(row);
                    },
                    onUncheck: function (row) {
                        vm.SetButtonState();
                        vm.removeProduct(row);
                    },
                    onCheckAll: function (rows) {
                        vm.SetButtonState();
                        rows.forEach(function (val) {
                            vm.addProduct(val);
                        });
                    },
                    onUncheckAll: function (rows) {
                        vm.SetButtonState();
                        rows.forEach(function (val) {
                            vm.removeProduct(val);
                        });
                    },
                    onLoadSuccess: function () {
                        checkSelectedProducts();

                    },
                    columns: [{
                        checkbox: true
                    }, {
                        field: 'ProductId',
                        title: 'Id',
                        visible: false
                    }, {
                        field: 'MerchantId',
                        title: 'merchantId',
                        visible: false
                    },{
                        field: 'Imgs',
                        title: '@BDMall.Resources.Label.Img',
                        events: {
                            'click .dialog': function (e, value, row, index) {
                                clearTimeout(timer);
                                timer = setTimeout(function () {
                                    var el = e.target;
                                    vm.getBigImage($(el));
                                }, 300);
                            },
                            'dblclick .dialog': function (e, value, row, index) {
                                clearTimeout(timer);
                                var el = e.target;
                                vm.openBigImage($(el));
                            }
                        },
                        formatter: function (value, row, index) {
                            return '<img  src="' + value[0] + '" width="64" class="dialog">';
                        }
                    },{
                        field: 'MerchantName',
                        title: '@BDMall.Resources.Label.MerchantName',
                    },{
                        field: 'Code',
                        title: '@BDMall.Resources.Label.ProductCode',
                    }, {
                        field: 'Name',
                        title: '@BDMall.Resources.Label.ProductName'
                    },{
                        field: 'ApproveTypeString',
                        title: '@BDMall.Resources.Label.ProductStatus',                       
                    },{
                        field: 'CatalogName',
                        title: '@BDMall.Resources.Label.Category'
                    }],
                    //formatLoadingMessage: function () {
                    //    //return '<%=Resources.Message.Processing%>';
                    //    return '';
                    //}

                });
            };

            return btTable;
        }



        //function ShowAttributeValue(me) {
        //    var val = $(me).val();
        //    //var data = new Object();
        //    //data.id = val;
        //    if (val != -1) {
        //        //InitNormalSelect("cboAttributeValue", "/adminapi/product/GetSelfDefineAttributeValue", true, data);
        //        BindAttributeValueCombobox(val);
        //        vm.IsShowAttributeValue = true;
        //    }
        //    else {
        //        $("#cboAttributeValue").empty();
        //        vm.IsShowAttributeValue = false;
        //    }

        //}

        function checkSelectedProducts()
        {
            if (vm.ProductList) {
                var datas = $("#tblProduct").bootstrapTable("getData");
                for (var i = 0; i < datas.length; i++) {
                    var product = datas[i];
                    for (var j = 0; j < vm.ProductList.length; j++) {
                        selectProduct = vm.ProductList[j];
                        if (selectProduct.Code == product.Code)
                        {
                            $("#tblProduct").bootstrapTable("check", i);
                        }
                    }
                }
            }
        }

        function search() {


            vm.ShowTableData();


        }

        //$(document).ajaxStart(function () {
        //    showLoading();
        //});
        //$(document).ajaxStop(function () {
        //    hideLoading();
        //});

        function GetProductCondition() {
            InitNormalSelect("cboMerchant", "/adminapi/Dict/GetMerchantCboSrc", true, null, false);

            WS.AjaxP("get", "/AdminAPI/Product/GetProductCondition", null, function (response) {
                vm.ProductCondtionCache = response.ReturnValue;
                InitNormalSelectByData("cboKeyWordType", response.ReturnValue.KeyWordTypes);
                //BindAttributeCombobox();
                InitNormalSelectByData("cboPermission", response.ReturnValue.Permissions);
                InitNormalSelectByData("cboSortedKey", response.ReturnValue.SortedKeys);
                InitNormalSelectByData("cboSortedType", response.ReturnValue.SortedKeyTypes);
            }, function () {

            });

        }
        //function BindAttributeCombobox() {
        //    var data = [];
        //    if (vm.ProductCondtionCache != null) {

        //        vm.ProductCondtionCache.Attributes.forEach(function (val, index, me) {
        //            //if (val.ParentId == parentId) {
        //            var option = new Object();
        //            option.Id = val.Id;
        //            option.Text = val.Text;
        //            data.push(option);
        //            //}
        //        });


        //    }
        //}

        //function BindAttributeValueCombobox(attributeId) {
        //    var data = [];
        //    if (vm.ProductCondtionCache != null) {

        //        vm.ProductCondtionCache.AttributeValues.forEach(function (val, index, me) {
        //            if (val.AttrId == attributeId) {
        //                var option = new Object();
        //                option.Id = val.Id;
        //                option.Text = val.Desc;
        //                data.push(option);
        //            }
        //        });
        //        InitNormalSelectByData("cboAttributeValue", data);

        //    }
        //}


        $(document).ready(function () {

            GetProductCondition();

            if (merchantId != WS.GuidEmpty) {
                $("#cboMerchant").val(merchantId);
            }

            var oTable = ProductTableInit();
            oTable.Init();


            //cover();
        });

    </script>

}
