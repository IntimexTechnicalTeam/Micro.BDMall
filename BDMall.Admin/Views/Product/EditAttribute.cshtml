
@{
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}

<link href="~/Scripts/bootstrap-fileinput/css/fileinput.min.css" rel="stylesheet"/>
<div id="app" class="col-md-12" v-cloak>
    <form id="commentForm" class="form-horizontal">
        <input type="hidden" id="hidAttributeID" v-model="attr.Id" />
        <div class="form-group">
            <label class="col-md-2"><span style="color:red;">*</span>@BDMall.Resources.Label.AttributeCode</label>
            <div class="col-md-10">
                <input type="text" name="attrCode" class="form-control" v-model="attr.Code" style="width:300px;" v-bind:disabled="AttrID!='00000000-0000-0000-0000-000000000000'" />
            </div>
        </div>
        <div class="form-group" v-for="item in attr.Descs">
            <label class="col-md-2">@BDMall.Resources.Label.Desc ({{item.Lang.Text}})</label>
            <div class="col-md-10">
                <input type="text" class="form-control" v-bind:id="'txtDesc_'+item.Lang.Code" v-bind:name="'txtDesc_'+item.Lang.Code" v-model="item.Desc" style="width:300px;" v-bind:disabled="IsMerchant" />
            </div>
        </div>
        <div class="form-group">
            <label class="col-md-2"><span style="color:red;">*</span>@BDMall.Resources.Label.AttributeLayout</label>
            <div class="col-md-10">
                <select id="cboAttrLayout" data-width="300px" v-bind:disabled="IsMerchant"></select>
            </div>
        </div>
        @*<div class="form-group" v-show="attr.IsInvAttribute==1">
                <div class="col-md-12">
                    <input type="checkbox" id="chkBatchOrder" v-model="attr.IsBatchOrder" /><label style="cursor: pointer;" for="chkBatchOrder">@BDMall.Resources.Label.BatchOrder</label>
                </div>
            </div>*@

        <div class="panel-body">
            <div id="subToolbar" class="btn-group">
                <button id="btn_SubAdd" type="button" class="btn btn-default" v-on:click="SubAdd" v-show="!IsMerchant">
                    <span class="glyphicon glyphicon-plus" aria-hidden="true"></span>@BDMall.Resources.Action.Add
                </button>
                <button id="btn_SubEdit" type="button" class="btn btn-default" v-on:click="SubModify" v-bind:disabled="IsModify">
                    <span class="glyphicon glyphicon-pencil" aria-hidden="true"></span>@BDMall.Resources.Action.Modify
                </button>
                <button id="btn_SubDelete" type="button" class="btn btn-default" v-on:click="SubDelete" v-bind:disabled="IsDelete">
                    <span class="glyphicon glyphicon-remove" aria-hidden="true"></span>@BDMall.Resources.Action.Delete
                </button>
            </div>

        </div>
        <table id="tblSubAttribute"></table>



        <div class="modal-footer">
            @*<button type="button" class="btn btn-default" v-on:click="Close">@BDMall.Resources.Action.Close</button>*@
            <button type="submit" class="btn btn-primary" style="width:200px;">@BDMall.Resources.Action.Save</button>
        </div>
    </form>



    @*屬性值的增刪改層*@

    <div id="myModal2" style="display:none; padding:5px;">
        <form id="attributeValueForm">
            <div class="modal-header">
                <span>{{SubAttriTitle}}</span>
            </div>
            <div>
                <input type="hidden" id="hidSubAttributeID" v-model="attrValue.Id" />
                <input type="hidden" id="hidSubAttributeParentID" v-model="attrValue.AttrId" />
                <div id="frmInput" class="form-horizontal">

                    <div class="form-group">
                        <label for="CatalogCode" class="col-md-5 text-left">@BDMall.Resources.Label.SubAttributeCode</label>
                        <div class="col-md-7">
                            <input type="text" class="form-control" name="subItemCode" v-model="attrValue.Code" id="txtSubAttriCode" maxlength="5" v-bind:disabled="subAction=='Modify'" />
                        </div>
                    </div>

                    <div class="form-group" v-for="item in attrValue.Descs">
                        <label class="col-md-5 text-left">@BDMall.Resources.Label.Desc ({{item.Lang.Text}})</label>
                        <div class="col-md-7">
                            <input type="text" class="form-control" v-bind:id="'SubDesc_'+item.Lang.Code" v-bind:name="'SubDesc_'+item.Lang.Code" />
                        </div>

                    </div>
                    <div class="form-group">
                        <label class="col-md-5 text-left">@BDMall.Resources.Label.Image</label>
                        <div class="col-md-7">
                            <img v-bind:src="attrValue.ImagePath" width="100" style="float:left;" />
                            <input name="txt_file" id="txt_file" type="file" class="file" style="float:right;" />
                            <input type="hidden" v-model="attrValue.Image" />
                        </div>
                    </div>
                    @*<div class="form-group">
                            <div class="col-md-12">
                                <input name="txt_file" id="txt_file" type="file" class="file" />
                            </div>
                        </div>*@
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" v-on:click="SubClose">@BDMall.Resources.Action.Close</button>
                <button type="submit" class="btn btn-primary">@BDMall.Resources.Action.Save</button>
            </div>
        </form>
    </div>

</div>

@section scripts
{
    @*<script src="~/Scripts/bootstrap-fileinput/js/fileinput.min.js"></script>*@
    <script type="text/javascript">
        var attrItemRowID = 0;
        //var params = bDialog.getDialogParams();
        var attrID = '@ViewBag.AttrID';
        var isInv = Boolean(@ViewBag.IsInv);
        var limitSize = @ViewBag.LimitSize;
        var isMerchant = Boolean(@ViewBag.IsMerchant);
        var vm = new Vue({
            el: "#app",
            data: {
                IsMerchant:isMerchant,
                AttrID: attrID,
                SubAttriTitle: "",
                attr: {
                    Id: WS.GuidEmpty,
                    Code: "",
                    //IsBatchOrder: false,
                    DescTransId: WS.GuidEmpty,
                    IsInvAttribute: isInv,
                    IsDelete: false,
                    Descs: [{ Lang: { Text: "", Code: "" }, Desc: "" }],
                    Layout:0,
                    AttributeValues: []
                },
                attrValue: {
                    Id: WS.GuidEmpty,
                    AttrId: WS.GuidEmpty,
                    Code: "",
                    DescTransId: WS.GuidEmpty,
                    Desc: "",
                    Descs: [{ Lang: { Text: "", Code: "" }, Desc: "" }],
                    Image: "",
                    ImagePath: ""
                },
                subTableValues: [
                    //{
                    //Id: WS.GuidEmpty,
                    //AttrId: WS.GuidEmpty,
                    //Code: "",
                    //DescTransId: WS.GuidEmpty,
                    //Desc_E: "",
                    //Desc_C: "",
                    //Desc_S: "",
                    //Desc_J: "",
                    //Image: "",
                    //ImagePath: ""
                    //}
                ],
                IsModify: true,
                IsDelete: true,
                action: "",
                subAction: "",

            },
            methods: {
                GetAttribute: function () {
                    var data = new Object();
                    data.id = vm.AttrID;
                    WS.AjaxP("get", "/adminapi/ProdAttribute/GetById", data, function (response) {
                        var showList = [];
                        vm.attr = response;
                        vm.attr.IsInvAttribute = isInv;
                        InitSubTable();

                        InitBootstrapSelect("cboAttrLayout", "/adminapi/Dict/GetAttrLayout", 1, false, false, null, function () {
                            $("#cboAttrLayout").selectpicker('val', vm.attr.Layout);
                        });

                        DBDataToSubTableData(vm.attr.AttributeValues);
                        showList = JSON.parse(JSON.stringify(vm.subTableValues));
                        $("#tblSubAttribute").bootstrapTable("load", showList);
                        vm.$nextTick(function () {
                            vm.attr.Descs.forEach(function (val, item) {
                                 $("#txtDesc_" + val.Lang.Code).rules('add', { validatorHTML: true });
                            });
                        });
                        //HideTableColumn();
                    }, function () { })
                },
                InitAttributeItem: function () {

                    var data = new Object();
                    data.id = WS.GuidEmpty;
                    WS.AjaxP("get", "/adminapi/ProdAttribute/GetItemById", data, function (response) {
                        vm.attrValue = response;
                        vm.$nextTick(function () {
                            vm.attrValue.Descs.forEach(function (val, item) {
                                $("#SubDesc_" + val.Lang.Code).rules('add', { validatorHTML: true });
                            });
                        });
                    }, function () { })
                },
                //Close: function () {
                //    $("#tblSubAttribute").bootstrapTable('removeAll');
                //    bDialog.closeCurrent();
                //},
                Save: function () {
                    saveAttribute();
                },
                SubAdd: function () {
                    vm.subAction = "Add";
                    vm.SubAttriTitle = "Add Sub Attribute";
                    vm.attrValue.AttrId = vm.AttrID;
                    vm.attrValue.Code = "";
                    //vm.GetAttributeItem();
                    show2Modal();

                },
                SubModify: function () {
                    var a = $("#tblSubAttribute").bootstrapTable('getSelections');
                    var selected = a[0];
                    vm.subAction = "Modify";
                    vm.SubAttriTitle = "Edit Sub Attribute";
                    vm.attrValue.AttrId = vm.AttrID;
                    vm.attrValue.ImagePath = selected.ImagePath;
                    //console.log(selected);
                    FillSubAttribute(selected);

                    show2Modal();
                },
                SubDelete: function () {
                    //$("#tblSubAttribute").bootstrapTable('removeAll');
                    var selected = $("#tblSubAttribute").bootstrapTable('getSelections');

                    if (selected.length > 0) {
                        var code = selected[0].Code;
                        var id = selected[0].Id;
                        //$("#tblSubAttribute").bootstrapTable('remove', { field: 'Code', values: code });
                        $("#tblSubAttribute").bootstrapTable('removeByUniqueId', id);
                        if (id != WS.GuidEmpty) {
                            SetDBDataDelete(id);
                        }
                    }
                    else {
                        showWarn('@BDMall.Resources.Message.DeleteSelect');
                    }

                },
                SubClose: function () {
                    CleanSubAttribute();
                    $('#app').unblock();
                    $("#txt_file").fileinput("clear");
                    vm.SetButtonState();
                },
                SubSave: function () {
                    saveAttributeValue();
                },
                SetButtonState: function () {
                    var selected = $("#tblSubAttribute").bootstrapTable("getSelections");
                    if (selected.length == 1) {
                         //&& selected[0].MerchantName != ''
                        if (!vm.IsMerchant) {
                            vm.IsModify = false;
                        }
                        else {
                            vm.IsModify = true;
                        }

                    }
                    else {
                        vm.IsModify = true;
                    }

                    if (selected.length >= 1) {
                        vm.IsDelete = false;
                    }
                    else {
                        vm.IsDelete = true;
                    }
                }
            }

        });


        function show2Modal() {
            $("#app").block({
                message: $('#myModal2'),
                css: {
                    'width': '600px',
                    'border': '1px',
                    'border-radius': '6px',
                    'box-shadow': '0 5px 15px rgba(0,0,0,.5)',
                    'cursor': 'default'
                },
                overlayCSS: { backgroundColor: '#000', opacity: '0.6', cursor: 'defalut' }
            });
        }

        function InitSubTable() {

            $("#tblSubAttribute").bootstrapTable({
                //method: 'get',                      //请求方式（*）
                //url: '/adminapi/ProdAttribute/GetSelfDefineAttribute',         //请求后台的URL（*）
                toolbar: '#subToolbar',                //工具按钮用哪个容器
                //striped: true,                      //是否显示行间隔色
                cache: false,                       //是否使用缓存，默认为true，所以一般情况下需要设置一下这个属性（*）
                pagination: false,                   //是否显示分页（*）
                sortable: false,                     //是否启用排序
                sortOrder: "asc",                   //排序方式
                //queryParams: queryParams,//传递参数（*）
                sidePagination: "client",           //分页方式：client客户端分页，server服务端分页（*）
                //pageNumber: 1,                       //初始化加载第一页，默认第一页
                //pageSize: 10,                       //每页的记录行数（*）
                //pageList: [10, 25, 50, 100],        //可供选择的每页的行数（*）
                showRefresh: false,                  //是否显示刷新按钮
                clickToSelect: true,                //是否启用点击选中行
                singleSelect: true,
                //height: 300,                        //行高，如果没有设置height属性，表格自动根据记录条数觉得表格高度
                uniqueId: "Id",                     //每一行的唯一标识，一般为主键列
                cardView: false,                    //是否显示详细视图
                detailView: false,                   //是否显示父子表
                onClickRow: function (row, $element) {
                    attrItemRowID = $element.data('index');
                },
                onLoadSuccess: function () {
                    vm.SetButtonState();
                },
                onCheck: function (row) {
                    vm.SetButtonState();
                },
                onUncheck: function (row) {
                    vm.SetButtonState();
                },
                onCheckAll: function (rows) {
                    vm.SetButtonState();
                },
                onUncheckAll: function (rows) {
                    vm.SetButtonState();
                },
                columns: InitTableColumn()
            });
        }

        function InitTableColumn() {
            var columns = new Array();
            var descName = new Array();
            descName.push('@BDMall.Resources.Label.Desc_e');
            descName.push('@BDMall.Resources.Label.Desc_c');
            descName.push('@BDMall.Resources.Label.Desc_s');
            descName.push('@BDMall.Resources.Label.Desc_j');
            columns.push({ checkbox: true });
            columns.push({ field: 'Id', title: 'id', visible: false });
            columns.push({ field: 'AttrId', title: 'AttrId', visible: false });
            columns.push({ field: 'MerchantName', title: '@BDMall.Resources.Label.MerchantName'});
            columns.push({ field: 'Code', title: '@BDMall.Resources.Label.AttributeCode'});
            if (vm.attr.Descs.length) {
                vm.attr.Descs.forEach(function (val, index) {
                    columns.push({field: 'Desc_' + val.Lang.Code, title: descName[index]});
                });
            }
            columns.push({
                field: 'ImagePath',
                title: '@BDMall.Resources.Label.Img',
                width: "400",
                formatter: function (value, row, index) {
                    return '<img  src="' + value + '" width="100"  class="img-rounded" >';
                }
            });
            //columns.push({ field: 'Image', title: '', visible: false });

            return columns;
        }

        function saveAttribute() {
            PutInsertRecordInItems();
            //var data = new Object();
            //data.attributeObj = vm.attr;
            vm.attr.Layout = $("#cboAttrLayout").val();
            WS.AjaxP("post", "/adminapi/ProdAttribute/Save", vm.attr, function (response) {
                if (response.Succeeded == true) {
                    vm.AttrID = response.ReturnValue;
                    attrID = response.ReturnValue;
                    vm.GetAttribute();
                    showCloseInfo('@BDMall.Resources.Message.SaveSuccess');
                    @*clowWin();*@
                }
                else {
                    showWarn(response.Message);
                }
            }, function () { })
        }

        function PutInsertRecordInItems() {
            var datas = $("#tblSubAttribute").bootstrapTable('getData');


            if (vm.attr.AttributeValues != null) {
                for (var i = vm.attr.AttributeValues.length - 1; i >= 0; i--) {
                    if (vm.attr.AttributeValues[i].Id == WS.GuidEmpty) {
                        vm.attr.AttributeValues.splice(i, 1);
                    }
                }
            }

            datas.forEach(function (val, index, array) {
                if (val.Id == WS.GuidEmpty) {


                    var row = new Object();
                    row.Id = val.Id;
                    row.AttrId = val.AttrId;
                    row.Code = val.Code;
                    row.Descs = JSON.parse(JSON.stringify(vm.attr.Descs));
                    for (var i = 0; i < row.Descs.length; i++) {
                        var desc = row.Descs[i];
                        if (desc.Lang.Code == "E") {
                            row.Descs[i].Desc = val.Desc_E;
                        }
                        else if (desc.Lang.Code == "C") {
                            row.Descs[i].Desc = val.Desc_C;
                        }
                        else if (desc.Lang.Code == "S") {
                            row.Descs[i].Desc = val.Desc_S;
                        }
                        else if (desc.Lang.Code == "J") {
                            row.Descs[i].Desc = val.Desc_J;
                        }
                    }
                    row.Status = val.Id == WS.GuidEmpty ? 0 : 1;
                    row.Image = val.Image;
                    row.ImagePath = val.ImagePath;

                    vm.attr.AttributeValues.push(row);
                }
            });
        }


        function saveAttributeValue() {

            var datas = $("#tblSubAttribute").bootstrapTable('getData');
            var selected = $("#tblSubAttribute").bootstrapTable('getSelections');
            var exceptMe = false;

            if (vm.attrValue.Code == "") {
                showWarn('@BDMall.Resources.Message.PleaseInputDesc');
                return;
            }


            if (selected.length > 0)//當有選中記錄時，判斷除去選中記錄以外的記錄與Code是否重複
            {
                if ($("#txtSubAttriCode").val().trim().toLocaleUpperCase() == selected[0].Code.trim().toLocaleUpperCase() && vm.subAction == "Modify") {
                    exceptMe = true;
                }
            }

            for (var i = 0; i < datas.length; i++) {
                if ($("#txtSubAttriCode").val().trim().toLocaleUpperCase() == datas[i].Code.trim().toLocaleUpperCase() && exceptMe == false) {
                    $("#txtSubAttriCode").val("");
                    $("#txtSubAttriCode").focus();
                    showWarn('@BDMall.Resources.Message.SubAttributeIsExist');
                    return;
                }
            }

            var row = new Object();

            row.Id = vm.attrValue.Id;
            row.AttrId = vm.attrValue.AttrId;
            row.Code = $("#txtSubAttriCode").val().trim();

            row.Desc_E = $("#SubDesc_E").length > 0 ? $("#SubDesc_E").val().trim() : "";
            row.Desc_C = $("#SubDesc_C").length > 0 ? $("#SubDesc_C").val().trim() : "";
            row.Desc_S = $("#SubDesc_S").length > 0 ? $("#SubDesc_S").val().trim() : "";
            row.Desc_J = $("#SubDesc_J").length > 0 ? $("#SubDesc_J").val().trim() : "";
            //row.Descs = vm.attrValue.Descs
            row.Image = vm.attrValue.Image;
            row.ImagePath = vm.attrValue.ImagePath;

            if (vm.subAction == "Add") {
                $("#tblSubAttribute").bootstrapTable('insertRow', {
                    index: datas.length, row: row
                });

                CleanSubAttribute();
            }
            else {
                $("#tblSubAttribute").bootstrapTable('updateRow', {
                    index: attrItemRowID, row: row
                });
                UpdateDBData(row);
                vm.SubClose();
            }
            $("#txt_file").fileinput("clear");
            vm.SetButtonState();
        }

        function UpdateDBData(data) {
            var dbData = vm.attr.AttributeValues;
            for (var i = 0; i < vm.attr.AttributeValues.length; i++) {
                var item = vm.attr.AttributeValues[i];
                if (item.Id == data.Id) {
                    item.Code = data.Code;
                    item.Descs = JSON.parse(JSON.stringify(vm.attr.Descs));

                    for (var j = 0; j < item.Descs.length; j++) {
                        var desc = item.Descs[j];
                        if (desc.Lang.Code == "E") {
                            item.Descs[j].Desc = data.Desc_E;
                        }
                        else if (desc.Lang.Code == "C") {
                            item.Descs[j].Desc = data.Desc_C;
                        }
                        else if (desc.Lang.Code == "S") {
                            item.Descs[j].Desc = data.Desc_S;
                        }
                        else if (desc.Lang.Code == "J") {
                            item.Descs[j].Desc = data.Desc_J;
                        }
                    }

                    item.Image = data.Image;
                    item.ImagePath = data.ImagePath;
                }
            }
        }
        //將數據庫中的屬性值列表中的多語言列表平攤
        function DBDataToSubTableData(datas) {
           
            vm.subTableValues=[];

            for (var i = 0; i < datas.length; i++) {
                var val = datas[i];

                var row = new Object();
                row.Id = val.Id;
                row.AttrId = val.AttrId;
                row.Code = val.Code;
                row.MerchantName = val.MerchantName;

                for (var j = 0; j < val.Descs.length; j++) {
                    var desc = val.Descs[j];
                    if (desc.Lang.Code == "E") {
                        row.Desc_E = desc.Desc;
                    }
                    else if (desc.Lang.Code == "C") {
                        row.Desc_C = desc.Desc;
                    }
                    else if (desc.Lang.Code == "S") {
                        row.Desc_S = desc.Desc;
                    }
                    else if (desc.Lang.Code == "J") {
                        row.Desc_J = desc.Desc;
                    }
                }
                row.Image = val.Image;
                row.ImagePath = val.ImagePath;

                vm.subTableValues.push(row);
            }
        }


        function SetDBDataDelete(id) {

            for (var i = 0; i < vm.attr.AttributeValues.length; i++) {
                var item = vm.attr.AttributeValues[i];
                if (item.Id == id) {
                    item.Status = 2;
                }
            }
        }

        var iconImgOption = new FileInputOption();
        iconImgOption.CtrlName = "txt_file";
        iconImgOption.UploadUrl = "/adminapi/FileUpload/UploadFile";
        iconImgOption.MaxFile = 1;
        iconImgOption.ShowRemove = false;
        iconImgOption.FileSize = limitSize;
        iconImgOption.SuccessCallback = function (data) {
            Vue.set(vm.attrValue, 'Image', data.response.ReturnValue[0].Name);
            Vue.set(vm.attrValue, 'ImagePath', data.response.ReturnValue[0].ThumbnailPath);
            clearPerview("txt_file");

        };
        iconImgOption.ErrorCallback = function (data) {
            vm.node.Image = "";
            vm.node.ImagePath = "";
        };
        FileInputInit(iconImgOption);


        function FillSubAttribute(selectedData) {
            vm.attrValue.Id = selectedData.Id;
            vm.attrValue.AttrId = vm.AttrID;
            vm.attrValue.Code = selectedData.Code;
            //vm.attrValue.Descs = selectedData.Descs;
            $("#SubDesc_E").val(selectedData.Desc_E);
            $("#SubDesc_C").val(selectedData.Desc_C);
            $("#SubDesc_S").val(selectedData.Desc_S);
            $("#SubDesc_J").val(selectedData.Desc_J);

        }



        function CleanSubAttribute() {
            $("#txtSubAttriCode").val("");
            //vm.attrValue.Descs.forEach(function (val) {
            //    val.Desc = "";
            //})
            $("#SubDesc_E").val("");
            $("#SubDesc_C").val("");
            $("#SubDesc_S").val("");
            $("#SubDesc_J").val("");

            vm.attrValue.Code = "";
            vm.attrValue.Image = "";
            vm.attrValue.ImagePath = "";

        }
        $(document).ajaxStart(function () {
            showLoading();
        });
        $(document).ajaxStop(function () {
            hideLoading();
        });


        //function save() {
        //    if ($("#commentForm").valid()) {
        //        alert("Yes");
        //        //vm.Save();
        //    }
        //}


        $(document).ready(function () {

            vm.GetAttribute();
            vm.InitAttributeItem();
            validatorHTML();
            $("#attributeValueForm").validate({
                submitHandler: function () {
                    vm.SubSave();
                },
                rules: {
                    subItemCode: {
                        required: true,
                        validatorHTML: true
                    }
                },
                messages:
                {
                    subItemCode: {
                        required: "@BDMall.Resources.Message.RequiredField"
                    }
                }
            });

            $("#commentForm").validate({
                submitHandler: function () {
                    vm.Save();
                },
                rules: {
                    attrCode: {
                        required: true,
                        validatorHTML: true
                    }
                },
                messages:
                {
                    attrCode: {
                        required: "@BDMall.Resources.Message.RequiredField",
                    }
                }
            });




        });
    </script>
}

